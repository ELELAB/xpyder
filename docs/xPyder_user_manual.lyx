#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
xPyder: a PyMOL plugin to analyze coupled residues and their networks in
 protein.
 
\end_layout

\begin_layout Author
Marco Pasi
\begin_inset Formula $^{1}$
\end_inset

, Matteo Tiberti
\begin_inset Formula $^{1}$
\end_inset

, Alberto Arrigoni, Elena Papaleo
\end_layout

\begin_layout Standard
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
the authors equally contributed to this work
\end_layout

\end_inset


\end_layout

\begin_layout Section
Plotting matrices: tutorial for the impatient user
\end_layout

\begin_layout Standard
This is a quick-and-dirty, hands-on tutorial which guides the user through
 few essential steps to obtain a publication-ready figure with xPyder.
 
\end_layout

\begin_layout Standard
What you need:
\end_layout

\begin_layout Itemize
The PyMOL software and a proper installation of xPyder;
\end_layout

\begin_layout Itemize
A matrix in a xPyder-readable format (from now on, the 
\begin_inset Quotes eld
\end_inset

matrix file
\begin_inset Quotes erd
\end_inset

).
 A simple text representation, with space-separated values and a newline
 character at the end of each matrix line will work fine.
 
\end_layout

\begin_layout Itemize
A PyMOL session in which the structures you need to plot on have been loaded.
 For structures composed of more than one chain, each one should have a
 proper and unique chain identifier.
 If this isn't the case you should use the PyMOL 
\begin_inset Quotes eld
\end_inset

alter
\begin_inset Quotes erd
\end_inset

 command to ensure this.
\end_layout

\begin_layout Standard
What you get:
\end_layout

\begin_layout Itemize
A visual representation of the relationships between residues encoded in
 the loaded matrix.
\end_layout

\begin_layout Standard
Here are the steps.
\end_layout

\begin_layout Enumerate
Open PyMOL and load the session or structure(s) you need to plot on.
 No other structure should be present.
 Load xPyder from the Plugins menu.
\end_layout

\begin_layout Enumerate
On the Matrix tab, click on the 
\begin_inset Quotes eld
\end_inset

Choose matrix file...
\begin_inset Quotes erd
\end_inset

 button.
 Choose the matrix file and click Ok.
 Click the Load matrix button.
 The matrix will be loaded and an histogram plot of the data distribution
 will be shown on the right.
\end_layout

\begin_layout Enumerate
(Optional, but highly recomended) Activate the Sequence distance and Matrix
 values filters, by clicking on their respective checkboxes in the Filters
 control section, on the right panel of the xPyder interface.
 The red boxes at left of the Filters' names will turn green, meaning that
 the filters are now active.
\end_layout

\begin_layout Enumerate
Click on the 
\begin_inset Quotes eld
\end_inset

Plot
\begin_inset Quotes erd
\end_inset

 button
\end_layout

\begin_layout Standard
Done! A number of red and blue cylinders have now appeared on the reference
 object, joining couples of residues whose matrix elements were positive
 or negative, respectively.
 You may save your session for future reference or obtain an image by using
 the standard save PyMOL command, maybe after rendering it with your favourite
 ray tracer.
 If you followed step 3, some of the least meaningful matrix values have
 been filtered out, and do not appear in the final representation.
 
\end_layout

\begin_layout Section
What is xPyder
\end_layout

\begin_layout Standard
xPyder is a PyMOL plugin originally conceived to analyze the cross correlations
 between residues as measured from molecular dynamics (MD) simulations,
 that is in fact capable of analyzing pairs of communicating or interacting
 residues, or any pairwise metric that is representable as a 2D matrix.
\end_layout

\begin_layout Standard
xPyder takes advantage of PyMOL's excellent molecular viewing capabilities
 to display in a simple and customizable way the correlations on the 3D
 structure, providing structural insight in the dynamical information contained
 in the correlation matrices that is otherwise hard to obtain, and to produce
 publication-quality images to capitalize on such information.
 In order to take full advantage of the often very large amount of information
 contained in the correlation matrices, xPyder features a full-fledged set
 of cascading filters that allow the user to refine the plotted data on
 the basis of their value or of the features of the structure they will
 be plotted on (such as secondary structure and distance between residues),
 as well as on the basis of user-defined PyMOL selections.
 Furthermore, these filters are independent modules that are easy to implement,
 and that plug in to xPyder to provide their functionality, making it possible
 for the users to add custom filters that exactly match their needs, giving
 xPyder the definitive customizability that is required for innovative scientifi
c analysis and imaging applications.
 Finally, xPyder extends and speeds up the analysis pipeline by integrating,
 in its first version, two useful analyses, 
\begin_inset Quotes eld
\end_inset

Chained
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

Delta
\begin_inset Quotes erd
\end_inset

, making them easily accessible through its simple interface.
\end_layout

\begin_layout Section
Installation
\end_layout

\begin_layout Subsection
Requirements
\end_layout

\begin_layout Standard
xPyder is very easy to install, and has few dependencies (in most cases,
 just PyMOL).
 This is the required software list for xPyder to work properly.
\end_layout

\begin_layout Itemize
python 2.7 
\begin_inset Newline newline
\end_inset

(http://www.python.org)
\end_layout

\begin_layout Itemize
PyMOL 
\begin_inset Formula $\geq$
\end_inset

1.4.0 
\end_layout

\begin_layout Itemize
numpy libraries 
\begin_inset Formula $\geq$
\end_inset

 1.5.1 
\begin_inset Newline newline
\end_inset

(http://sourceforge.net/projects/numpy/files/NumPy/)
\end_layout

\begin_layout Itemize
matplotlib libraries 
\begin_inset Formula $\geq$
\end_inset

1.1 
\begin_inset Newline newline
\end_inset

(http://sourceforge.net/projects/matplotlib/files/matplotlib/)
\end_layout

\begin_layout Itemize
networkx libraries 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $\geq$
\end_inset


\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
 1.5 (already included in the installation - you don't need to download them)
\end_layout

\begin_layout Itemize
Tkinter libraries 
\begin_inset Formula $>$
\end_inset

8.4 with ttk support.
 As some Python 2.6 distribution don't come with ttk included, we provided
 a fallback included in the xPyder package.
 This is usually the case for the MacPorts OS X install.
\end_layout

\begin_layout Standard
In our installation tests, we found the local Python and PyMOL and python
 environment to vary considerably among different operating systems and
 linux distrubitions.
 For example, you may need to install the corresponding Python 2.6 libraries
 if your PyMOL distribution uses version 2.6.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
If PyMOL 1.4 is not available for your operative system as a pre-packaged
 installer from Schrodinger, you can install it in other ways.
\end_layout

\begin_layout Itemize
In linux you should refer to the standard package infrastructure of your
 distribution or compile it from scratch.
\end_layout

\begin_layout Itemize
In OSX you can install the version distributed with MacPorts 
\begin_inset Newline newline
\end_inset

(http://www.macports.org/).
\end_layout

\begin_layout Itemize
In Windows, you can follow the tutorial on the PyMOL wiki 
\begin_inset Newline newline
\end_inset

(http://www.pymolwiki.org/index.php/Windows_Install).
 
\begin_inset Newline newline
\end_inset

Briefly, it involves downloading and installing Python 2.7 from the official
 site and the unofficial pre-compiled PyMOL installer from Christoph Gohlke
 
\begin_inset Newline newline
\end_inset

(http://www.lfd.uci.edu/~gohlke/pythonlibs/#pymol).
\end_layout

\begin_layout Subsection
Installation
\end_layout

\begin_layout Standard
Once PyMOL and libraries are present on your system, the installation procedure
 is straightforward.
 
\end_layout

\begin_layout Enumerate
If you have git installed in your system, clone the xPyder repository on
 your local machine:
\family typewriter

\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

git clone https://github.com/ELELAB/xpyder.git
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\family default
Alternatively, you can manually download and decompress the zip package
 from the GitHub repository in a local directory.
 In either case you should end up with a directory containing the files
 required for xPyder to function.
\end_layout

\begin_layout Enumerate
Move the directory obtained in the previous step to a known location (For
 example, 
\family typewriter
/home/myuser/xPyder
\family default
; this will be where support files for xPyder will be stored.
\end_layout

\begin_layout Enumerate
Enter the just created directory and open the 
\family typewriter
xPyder.py
\family default
 file with your favorite text editor, as vim, Notepad, Sublime text or others.
\end_layout

\begin_layout Enumerate
Look for a line starting with 
\begin_inset Quotes eld
\end_inset


\family typewriter
INSTALLDIR
\family default

\begin_inset Quotes erd
\end_inset

.
 It should be around line 18.
\end_layout

\begin_layout Enumerate
replace 
\family typewriter
INSTALLDIR_PLACEHOLDER
\family default
 with the absolute path of the xPyder installation directory.
 Do not touch anything else.
 For exemple, modif
\family typewriter
y
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

INSTALLDIR=r"INSTALLDIR_PLACEHOLDER"
\begin_inset Newline newline
\end_inset


\family default

\begin_inset Newline newline
\end_inset

to
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\family typewriter
INSTALLDIR=r"/home/myuser/xPyder"
\end_layout

\begin_layout Enumerate
Save the file and exit the editor.
\end_layout

\begin_layout Enumerate
Install 
\family typewriter
xPyder.py
\family default
 as you would have done with any other PyMOL plugin.
 Open PyMOL, click on the Plugins menu, Manage Plugins, Install.
 Choose xPyder.py.
 Restart PyMOL as required.
\end_layout

\begin_layout Section
The Plugin
\end_layout

\begin_layout Subsection
The xPyder main tab
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/figure1-a.png
	width 90text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
xPyder's main tab
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Matrix section
\end_layout

\begin_layout Standard
Allows the user to load the matrix (
\begin_inset Formula $M_{i,j}$
\end_inset

) that encodes the relationship to be plotted on the 3D structure.
 The matrix must be a 
\begin_inset Formula $N\times N$
\end_inset

 symmetrical matrix, where 
\begin_inset Formula $N$
\end_inset

 corresponds to the number of residues in the analyzed PyMOL object (
\series bold
Input object
\series default
, see on).
 The matrix file must be a plain-text file consisting of 
\begin_inset Formula $N$
\end_inset

 lines, with 
\begin_inset Formula $N$
\end_inset

 whitespace-separated floating-point numbers on each line.
 The entry in the 
\begin_inset Formula $i$
\end_inset

-th row and the 
\begin_inset Formula $j$
\end_inset

-th column of the matrix will correspond to the 
\begin_inset Formula $j$
\end_inset

-th number present on line 
\begin_inset Formula $i$
\end_inset

.
 
\end_layout

\begin_layout Standard
The order of the matrix elements is assumed to be that of the residues in
 the corresponding PyMOL structure, i.e.
 field 
\begin_inset Formula $j$
\end_inset

 of line 
\begin_inset Formula $i$
\end_inset

 of the matrix file describes correlations between residues 
\begin_inset Formula $i$
\end_inset

 and 
\begin_inset Formula $j$
\end_inset

 in the PyMOL object.
 The user should make sure of this correspondence when using xPyder.
 An easy way to do this is by using the 
\series bold
Save log file 
\series default
functionality (see below).
\end_layout

\begin_layout Description
Choose
\begin_inset space ~
\end_inset

matrix
\begin_inset space ~
\end_inset

file: The file containing the matrix can be specified either by using the
 file selection dialog that appears by clicking on the button, or by typing
 its full path in the adjacent field;
\end_layout

\begin_layout Description
Load
\begin_inset space ~
\end_inset

matrix: This loads the matrix from the specified file, and plots a histogram
 of the loaded values; by clicking the histogram, a larger version of the
 histogram appears in a popup window, featuring the useful 
\series bold
matplotlib 
\series default
toolbar, which allows, among other features, to save the histogram to an
 image file (for more information see the matplotlib help http://matplotlib.sourc
eforge.net/users/navigation_toolbar.html).
\end_layout

\begin_layout Subsubsection
Pymol objects
\end_layout

\begin_layout Standard
The user can specify via the 
\series bold
Input object name 
\series default
field, to which PyMOL object or selection the loaded correlations refer
 to.
 The field must contain a valid PyMOL object or selection name, and the
 number of residues in the object/selection will be used to validate the
 matrix input (see above, 
\series bold
Matrix
\series default
).
 Since the correspondence between the matrix and the PyMOL object/selection
 is done merely on the basis of the order of residues, such correspondence
 should be checked by the user (see below, 
\series bold
Save log file).
\end_layout

\begin_layout Standard
The 3D plot of the relationship encoded in the matrix is saved in the PyMOL
 object specified by 
\series bold
Output object name
\series default
: if such object exists, the plot is appended to the object as its next
 state; otherwise the object is created.
\end_layout

\begin_layout Subsubsection
Plot and visualization options
\end_layout

\begin_layout Standard
Allows the user to access xPyder's visualization options.
 These have been designed in order to allow the user to customize the colors
 and the size of the cylinders used for the plot of inter-residue relationships
 (off-diagonal values of the matrix), and of the spheres used for the plot
 of intra-residue relationships (the values on the diagonal of the matrix).
\end_layout

\begin_layout Description

\lang british
Minimum/Maximum
\begin_inset space ~
\end_inset

size
\lang english
: allows the user to define the size of the cylinders to be plotted: relationshi
ps with absolute value of 
\begin_inset Formula $m_{min}$
\end_inset

 will be displayed with cylinders of width 
\series bold
Minimum size
\series default
, while relationships with absolute value of 
\begin_inset Formula $m_{max}$
\end_inset

 will be displayed with cylinders of width 
\series bold
Maximum size
\series default
; the sizes for the values in between are linearly interpolated.
 
\end_layout

\begin_layout Description
Width
\lang british

\begin_inset space ~
\end_inset


\lang english
normalization
\lang british

\begin_inset space ~
\end_inset


\lang english
mode: allows the user to define how xPyder defines the values of 
\begin_inset Formula $m_{min}$
\end_inset

 and 
\begin_inset Formula $m_{max}$
\end_inset

.
 If this option is set to 
\begin_inset Quotes eld
\end_inset

Absolute
\begin_inset Quotes erd
\end_inset

, these values are specified by the user using the Min value and Max value
 fields.
 The values extracted from the matrix file are therefore processed in order
 for their absolute value to be included in the specified range.
 If the loaded matrix contains values which lie out of this range, their
 absolute value is coerced to the nearest of the two extremes just before
 plotting them, and a warning is issued to inform the user.
 Please note that for Delta matrix plots (see below), the range in Absolute
 mode is implicitly set to [0; 
\begin_inset Formula $2m_{max}$
\end_inset

].
 If otherwise this option is set to 
\begin_inset Quotes eld
\end_inset

Relative
\begin_inset Quotes erd
\end_inset

 (default), xPyder automatically identifies the minimum and maximum (absolute)
 values of the matrix and assigns them as 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $m_{min}$
\end_inset


\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
and 
\begin_inset Formula $m_{max}$
\end_inset

.
\end_layout

\begin_layout Description

\lang british
Color
\begin_inset space ~
\end_inset

for
\begin_inset space ~
\end_inset

positive/negative
\begin_inset space ~
\end_inset

values
\lang english
: by pressing the 
\begin_inset Quotes eld
\end_inset

+
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

-
\begin_inset Quotes erd
\end_inset

 buttons two menus are displayed that allow the choice of plot colors.
\end_layout

\begin_layout Description

\lang british
Plot
\begin_inset space ~
\end_inset

diagonal
\lang english
: if checked, the user can select a range size for the sphere representation
 of the elements that lie on the diagonal of the loaded matrix (please see
 
\series bold
Minimum/Maximum size
\series default
 above).
\end_layout

\begin_layout Subsubsection
Graph and Log
\end_layout

\begin_layout Standard
The user can optionally save a 2D graph of the obtained 3D plot in an encapsulat
ed postscript (eps) file by checking the 
\series bold
Save graph image
\series default
 checkbox.
 The graph is drawn by finding a best 2D layout for the 3D plot by using
 the Fruchterman-Reingold algorithm (see the relevant page on the networkx
 website: http://networkx.lanl.gov/reference/generated/networkx.spring_layout.html).
 
\end_layout

\begin_layout Standard
Furthermore, a plain-text list of the cylinders and spheres plotted can
 be obtained by checking the 
\series bold
Save log file 
\series default
checkbox.
 This list contains a line for each of the plotted cylinders, that describes
 the corresponding relationship 
\begin_inset Formula $m_{i,j}$
\end_inset

 using 5 fields: 
\end_layout

\begin_layout Enumerate
the chain identifier of the first residue involved 
\begin_inset Formula $i$
\end_inset

; 
\end_layout

\begin_layout Enumerate
the residue number (according to PyMOL) of the first residue 
\begin_inset Formula $i$
\end_inset

;
\end_layout

\begin_layout Enumerate
the chain identifier of the second residue involved 
\begin_inset Formula $j$
\end_inset

; 
\end_layout

\begin_layout Enumerate
the residue number (according to PyMOL) of the second residue 
\begin_inset Formula $j$
\end_inset

;
\end_layout

\begin_layout Enumerate
the entity of the relationship 
\begin_inset Formula $m_{i,j}$
\end_inset

, as encoded in the matrix.
\end_layout

\begin_layout Standard
The log file can be a powerful tool to evaluate the correspondence between
 the loaded matrix and the PyMOL structure on which the 3D plot is performed.
 
\end_layout

\begin_layout Subsection
Filters
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/figure1-d.png
	width 90text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Matrix filters options
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Filtering the loaded matrix
\end_layout

\begin_layout Standard
A square symmetric matrix of 
\begin_inset Formula $N$
\end_inset

 elements describes 
\begin_inset Formula $(N(N-1))/2$
\end_inset

 unique relationships between distinct residues.
 As proteins easily comprise hundreds of residues this number gets quite
 high, and plotting the whole matrix on the 3D structure in terms of binary
 relationships usually turns out to be unpractical.
 Filtering out the least meaningful elements of the matrix is thus often
 more a necessity than an option, and it is useful to discern and point
 out the most important features of the relationships encoded by the matrix.
\end_layout

\begin_layout Standard
xPyder addresses this problem by implementing a modular filtering system,
 designed with expandability and flexibility in mind.
 Each filter acts independently on the loaded matrix, by deleting (zeroing
 out) those matrix elements that do not match the filters' criteria.
 They work like an array of superimposed cascading masks; only those elements
 that aren't blocked by any filter get to the plotting stage.
 The filtering system is modular, meaning that additional elements can be
 implemented and added to xPyder as external plugins, thus ensuring a high
 level of expandability.
 Filtering plugins are usually independent respect to one another, but can
 share their capabilities by registering to a common internal interface.
 The behavior of a plugin may thus depend by the status of another one;
 this will be described more in detail later when necessary.
\end_layout

\begin_layout Standard
From the user's point of view, filters are handled by the Filters control
 panel, on the right side of the interface, where each installed plugin
 is listed along with an activation/deactivation checkbox and a status light.
 By default all filters are off, and can be turned on by clicking on the
 respective checkboxes.
 The Filters page contains a small box per filter, and this is where the
 user can modify the filtering parameters and behavior at will.
 
\end_layout

\begin_layout Standard
Plugins have three possible statuses, which are represented by three different
 colors of the status light.
\end_layout

\begin_layout Itemize
Turned off (red): the filter is turned off and will not be used
\end_layout

\begin_layout Itemize
Turned on and active (green): the filter is turned on and ready to work;
 it will be used.
\end_layout

\begin_layout Itemize
Turned on and inactive (yellow): the filter is turned on but is not ready
 to work.
 This is usually due to the fact that incorrect parameters have been specified
 by the user or that the plugin is awaiting for user intervention.
\end_layout

\begin_layout Standard
Only plugins in the green status will be used to filter the matrix before
 plotting.
 To make the inactive filters active (i.e.
 to turn the yellow filters green) the user is invited to modify the filter's
 parameters according to the indications written next to the plugin's name
 in the Filters control panel, until the plugin's status light turns green.
 The status light is automatically updated in real-time upon user intervention.
\end_layout

\begin_layout Standard
xPyder comes with six default filters, which should cover the users' most
 common necessities.
 Please consider that, if not specified otherwise, the plugins' parameters
 are defined so that the users chooses what will be plotted, not what will
 be filtered out.
 For example, if for a given filter controlled by a parameter whose 
\begin_inset Quotes eld
\end_inset

meaningful values
\begin_inset Quotes erd
\end_inset

 range is defined by the user as residing between 0.2 and 0.6, all the matrix
 elements for which that parameter is lower than 0.2 and higher then 0.6 will
 be excluded from plotting.
 
\end_layout

\begin_layout Subsubsection
Default filters
\end_layout

\begin_layout Standard
The following section describes how each of the default filters work.
 For each filter, default parameter values have been provided by the authors
 according to personal experience on a limited number of test systems; the
 user is invited to modify them as required.
\end_layout

\begin_layout Standard
In the following description, 
\begin_inset Formula $M$
\end_inset

 will be the loaded relationship matrix, and 
\begin_inset Formula $m_{ij}$
\end_inset

will be the matrix element referring to residues 
\begin_inset Formula $i$
\end_inset

 and 
\begin_inset Formula $j$
\end_inset

.
\end_layout

\begin_layout Paragraph
Sign Filter
\end_layout

\begin_layout Standard
This is the simplest filter, designed to filter matrix values by sign.
 If positive or negative is chosen, only positive or negative (respectively)
 values of 
\begin_inset Formula $M$
\end_inset

 will be plotted (
\begin_inset Formula $m_{ij}>0$
\end_inset

 or 
\begin_inset Formula $m_{ij}<0$
\end_inset

).
 
\end_layout

\begin_layout Paragraph
Sequence distance filter
\end_layout

\begin_layout Standard
This filter works by filtering the matrix elements depending on distance
 in protein sequence of the respective residues.
 Given 
\begin_inset Formula $I$
\end_inset

 and 
\begin_inset Formula $J$
\end_inset

 as the simple sequence numbers of residues 
\begin_inset Formula $i$
\end_inset

 and 
\begin_inset Formula $j$
\end_inset

, if the cut-off mode is 
\begin_inset Quotes eld
\end_inset

Within distance
\begin_inset Quotes erd
\end_inset

, only matrix elements whose residue couples have a distance in sequence
 lower than the cut-off value 
\begin_inset Formula $c$
\end_inset

 (
\begin_inset Formula $|I-J|<c)$
\end_inset

 will be considered for plotting.
 On the contrary, if the cut-off mode is 
\begin_inset Quotes eld
\end_inset

Over distance
\begin_inset Quotes erd
\end_inset

, only residue couples whose distance in sequence is higher or equal to
 the distance cut-off value (
\begin_inset Formula $|I-J|\geq c)$
\end_inset

 will be plotted.
\end_layout

\begin_layout Paragraph
Selections filter
\end_layout

\begin_layout Standard
This filter works on PyMOL selections and objects, by excluding all the
 matrix elements whose residues are not part of the chosen selection(s).
 The two input boxes, Selections 1 and 2, are used to provide the plugin
 with user-defined selections by name.
 
\begin_inset Quotes eld
\end_inset

all
\begin_inset Quotes erd
\end_inset

 is also a permitted value.
 
\end_layout

\begin_layout Standard
In Single mode, all the relationships between the residues included in the
 selection specified in Selection 1 are plotted.
 The content of Selection 2 is ignored.
\end_layout

\begin_layout Standard
In Double mode, all and only the relationships between each residue of Selection
 1 and each residue of Section 2 are considered for plotting.
 This is particularly useful, for example, to identify the relationship
 between a residue and the rest of the protein.
 Notice that, in Double mode, the two selections must be strictly overlapping
 (falling back to Single mode) or completely non-overlapping.
 
\end_layout

\begin_layout Paragraph
Matrix values filter
\end_layout

\begin_layout Standard
This filter allows to filter the input matrix by the matrix values itself.
 Only the input matrix elements 
\begin_inset Formula $m_{ij}$
\end_inset

 whose values fall between the low cut-off 
\begin_inset Formula $l$
\end_inset

 and the high cut-off 
\begin_inset Formula $h$
\end_inset

 are plotted (
\begin_inset Formula $m_{ij}\epsilon[l;h]$
\end_inset

 ).
\end_layout

\begin_layout Paragraph
Distance matrix filter
\end_layout

\begin_layout Standard
The 3D distance filter acts on the input matrix depending to a 
\begin_inset Formula $C_{\alpha}$
\end_inset

 distance matrix 
\begin_inset Formula $R$
\end_inset

.
 It works similarly to the Relationships entity filter, only considering
 the 
\begin_inset Formula $r_{ij}$
\end_inset

 element as mean of comparison instead of the input matrix element 
\begin_inset Formula $m_{ij}$
\end_inset

(
\begin_inset Formula $r_{ij}\epsilon[l;h]$
\end_inset

).
 The distance matrix can be loaded from file, or, as happens by default,
 calculated on the loaded tridimensional structure.
 Distance are expressed in nm.
\end_layout

\begin_layout Standard
The distance matrix loaded on the 3D distance plugin is also used by the
 Secondary structure filter plugin.
\end_layout

\begin_layout Paragraph
Secondary structure filter
\end_layout

\begin_layout Standard
The secondary structure filter has been designed to filter out the matrix
 elements which connect residues belonging to the same secondary structure
 element, defined as 
\begin_inset Formula $\alpha$
\end_inset

-helix or 
\begin_inset Formula $\beta$
\end_inset

-sheet.
 This is particularly useful for correlation matrices, as residues belonging
 to the same secondary structure element usually feature a high level of
 motion correlation, which is useful to filter out to obtain a more compact
 and cleaner representation.
\end_layout

\begin_layout Standard
The user can choose to filter out correlations between residues involved
 in alpha or beta structural elements, or both, using the controls in the
 right side of the Secondary structure filter in the Filters tab.
 
\end_layout

\begin_layout Standard
As identifying secondary structure elements is not a trivial task, different
 working modes can be selected.
 If read from file is chosen, the user has to input a secondary structure
 definition file by clicking on the Load secondary structure button.
 The file may be in the DSSP [Kabsch W and Sander C, Biopolymers, 1983]
 or PDSSP output file format (which will be described shortly).
 If the loaded secondary structure file contains information for more than
 one definition, as often happens with PDSSP files, the user has to choose
 the secondary structure definition to be used; the numbers refer to the
 order of the structure present in the PDSSP file.
\end_layout

\begin_layout Standard
If 
\begin_inset Quotes eld
\end_inset

read from loaded structure
\begin_inset Quotes erd
\end_inset

 is chosen, the secondary structure definition already present in the reference
 PyMOL object will be used.
\end_layout

\begin_layout Standard
At last, PyMOL is able to calculate a secondary structure definition for
 the loaded structure using the util.ss command (see PyMOL documentation
 for details), as happens when using the 
\begin_inset Quotes eld
\end_inset

calculate using PyMOL
\begin_inset Quotes erd
\end_inset

 option.
 PyMOL authors stress that this is not a sound and failproof method and
 that the obtained results should be subject to proofreading before productive
 use.
 We suggest to use this method as a quick-and-dirty way to filter out the
 secondary structure elements, mainly useful for fast screening.
\end_layout

\begin_layout Standard
Of the described working modes, DSSP only is able to assign beta residues
 to 
\begin_inset Formula $\beta$
\end_inset

-sheets.
 This feature is, indeed, very useful, as it permits to filter out the matrix
 elements which join 
\begin_inset Formula $\beta$
\end_inset

-strands of the same 
\begin_inset Formula $\beta$
\end_inset

-sheet.
 In the cases in which
\begin_inset Formula $\beta$
\end_inset

-sheets are not specially crafted sheets assignation algorithm is used.
 First, 
\begin_inset Formula $\beta$
\end_inset

-residues are considered as nodes of a graph, which are connected by edges
 if their distance in the 3D structure is inferior to the Distance cut-off
 defined in the filters' interface, or if they are part of the same 
\begin_inset Formula $\beta-$
\end_inset

strand.
 The connected components of the graph are then identified, which correspond
 to single interconnected 
\begin_inset Formula $\beta$
\end_inset

-sheets.
 All the matrix elements referring to all the possible 
\begin_inset Formula $(i,j),i\neq j$
\end_inset

 couples of nodes of each connected component are filtered out.
\end_layout

\begin_layout Standard
Please notice that the distance matrix used to build the graph is retrieved
 from the Distance matrix plugin, so that either the user-loaded matrix
 or the pdb-calculated matrix will be used.
 Both the distance matrix and the secondary structure elements should refer
 to the same structural ensemble to ensure a consistent behavior of the
 plugin.
\end_layout

\begin_layout Standard
The PDSSP file format is designed to host secondary structure data for one
 or more molecular dynamics simulation or crystal structures.
 It is composed of
\begin_inset Formula $1+(n*2)$
\end_inset

 space-separated columns, and each row represents a protein residue.
 The first column is the residue number.
 The remaining columns have to be interpreted as couples, each couple representi
ng a simulation or crystal structure.
 The first column of each couple hosts the type of secondary structure as
 described in the DSSP dictionary, with 
\begin_inset Quotes eld
\end_inset

~
\begin_inset Quotes erd
\end_inset

 representing unstructured regions.
 The second column is always a percentage value which represents the fraction
 of frames in which the given residue is found in the secondary structure
 written in the first column.
 For example, this PDSSP file:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

1       H       100.00      H       100.00 
\end_layout

\begin_layout Plain Layout

2       H       100.00      H       100.00 
\end_layout

\begin_layout Plain Layout

3       H       100.00      H       100.00 
\end_layout

\begin_layout Plain Layout

4       H       90.59       H       90.23 
\end_layout

\begin_layout Plain Layout

5       H       84.82       H       81.17 
\end_layout

\begin_layout Plain Layout

6       H       69.86       ~       67.43 
\end_layout

\begin_layout Plain Layout

7       H       58.76       ~       59.26 
\end_layout

\begin_layout Plain Layout

8       ~       49.47       ~       58.12 
\end_layout

\begin_layout Plain Layout

9       ~       68.43       ~       84.96
\end_layout

\end_inset


\end_layout

\begin_layout Standard
will represent the most retained secondary structures of a 9-residue peptide,
 in two different simulations.
\end_layout

\begin_layout Paragraph
B Factor filter
\end_layout

\begin_layout Standard
Using this filter the user can plot only correlations between residues featuring
 B Factor values in a given range.
 The B Factor is taken from the corresponding column of the PDB file from
 which the reference structure was loaded (in fact, it is taken from the
 values parsed by PyMOL).
 By modifying the Low and High cut-offs, the user can tweak the allowed
 B Factor range to her own requirements.
 To help in the definition of the cut-off values, after the first plot is
 issued, a histogram representing the distribution of B Factor values in
 the reference structure is shown inside the filter's option box.
 This allows the user to modify the cut-off values accordingly to refine
 the representation in subsequent plots.
 
\end_layout

\begin_layout Standard
Acting on real B Factors, or on simulation-derived B Factors, the user can
 exclude from the analysis the regions that have high experimental uncertainty,
 or focus the analysis on highly flexible tracts of the protein.
 But the applicability of the filter goes behond simply filtering flexibility.
 In fact, it is a simple and common practice to replace the B Factor column
 in PDB files with whatever biochemical property may be of interest, as
 a means of providing results of a given analysis along with a structure,
 e.g.
 for colouring the structure accordingly.
 xPyder's B Factor filter exploits this, giving the user highly extensible
 filtering options thanks to cross-talk with other applications.
 Finally, in cases where the analysis tool that produces the values the
 user would like to use for filtering the correlation analysis does not
 provide output in the B Factor column of a PDB file, but instead for example
 in a text file, there exist several scripts that make these values readily
 available both for coloring and for filtering with the B Factor filter
 in xPyder.
 One such example is reported on the PyMOL Wiki (http://www.pymolwiki.org/index.php
/Color) and reported here.
 
\end_layout

\begin_layout Standard
Consider that the analysis tool has provided the ouptut profile of interest
 in a plain text file (
\shape italic
output.dat
\shape default
), containing on each line the value for each residue in order.
 After loading the corresponding PDB structure (
\shape italic
structure.pdb
\shape default
) in PyMOL, the B Factor values of the resulting PyMOL object can be modified
 by using the 
\family typewriter
alter
\family default
 command:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},language=Python,tabsize=4"
inline false
status open

\begin_layout Plain Layout

# 1) load the protein in the "reference" PyMOL Object
\end_layout

\begin_layout Plain Layout

cmd.load("structure.pdb", "reference")
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# 2) open the file containing the analysis output 
\end_layout

\begin_layout Plain Layout

in_file = open("output.dat", 'r')
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# 3) read the data and store it, then close the file
\end_layout

\begin_layout Plain Layout

stored.profile = []
\end_layout

\begin_layout Plain Layout

for line in in_file.readlines(): 
\end_layout

\begin_layout Plain Layout

	stored.profile.append( float(line) )
\end_layout

\begin_layout Plain Layout

in_file.close()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# 4) clear out the old B Factors
\end_layout

\begin_layout Plain Layout

alter reference, b=0.0
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# 5) update the B Factors with the profile
\end_layout

\begin_layout Plain Layout

alter reference and name CA, b=stored.profile.pop(0)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
reference
\family default
 PyMOL object now has re-defined B Factor values taken from the data in
 the 
\shape italic
output.dat
\shape default
 file.
 In case the latter contains both residue number and the output profile,
 separeted by white space (i.e.
 a two-column file, of which only the second is of interest), step 3) of
 the above procedure becomes:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},language=Python,tabsize=4"
inline false
status open

\begin_layout Plain Layout

# 3) read the data and store it, then close the file
\end_layout

\begin_layout Plain Layout

stored.profile = []
\end_layout

\begin_layout Plain Layout

for line in in_file.readlines():
\end_layout

\begin_layout Plain Layout

	# values is a list: [ residue_number , profile_value ]
\end_layout

\begin_layout Plain Layout

	values = line.split()
\end_layout

\begin_layout Plain Layout

	# keep only the second element
\end_layout

\begin_layout Plain Layout

	profile_value = values[1]
\end_layout

\begin_layout Plain Layout

	stored.profile.append( float(profile_value) )
\end_layout

\begin_layout Plain Layout

in_file.close()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A script (data2bfactor.py) that performs this operation (and a similar operation
 on the occupancy field) can be downloaded from Robert Campbell's PyMOL
 script repository (http://pldserver1.biochem.queensu.ca/~rlc/work/pymol/).
\end_layout

\begin_layout Subsection
Chains of relationships
\end_layout

\begin_layout Subsubsection*
Introduction: a short primer on graph theory
\end_layout

\begin_layout Standard
In mathematics and information science, a graph is an abstract representation
 that encodes relationships between objects of a given set by formalizing
 binary relationships between them.
 A graph is composed of nodes or vertices, which are the objects between
 which relationships are defined.
 Nodes are connected by edges or arcs, that define the relationships between
 them; two nodes are connected by an edge only if, in a given problem, a
 certain relationship exists between them.
 For example, we could build a graph with cities of a certain region as
 nodes and roads or railways connecting them as edges; two cities would
 then be connected only if direct travel between them is possible.
 In fact, a graph is often visualized as a bidimensional plot in which nodes
 are represented by dots and edges are represented by lines or arrows connecting
 them.
 Once the graph has been built, we can use several algorithms and techniques
 to answer more specific questions; In the cities example, we may ask ourselves
 what is the route with least exchanges between two non directly connected
 cities.
\end_layout

\begin_layout Standard
In a simple graph, such as the one used by xPyder to encode the binary relations
hips between residues, the edges are undirected (i.e.
 the relationships between nodes don't have a directionality), no more than
 one edge connects two given nodes (the relationships are binary) and there
 are no loops (no edges connecting a node with itself exist).
 Moreover, each edge is associated with a (positive) number that defines
 the strength of the relationship (the graph is weighted).
 Starting on this simple description, other peculiar metrics and properties
 of a graph can be derived.
\end_layout

\begin_layout Standard
The degree of a node is defined as the number of edges connected to it.
 As no loops exist in the relationships graph, a node can have at most a
 degree of 
\begin_inset Formula $n-1$
\end_inset

, where 
\begin_inset Formula $n$
\end_inset

 is the total number of nodes.
\end_layout

\begin_layout Standard
In graph theory, a wealth of problems deals with identifying specific paths
 between nodes.
 A path in a graph is a specific sequence of vertices such that from each
 of its vertices there is an edge to the next vertex in the sequence.
 This means that one could travel from the first vertex of the path to the
 last along the graph, visiting all the nodes of the path by passing through
 edges connecting them.
\end_layout

\begin_layout Standard
In the graph calculated by xPyder, two vertices may or may not be connected
 by edges, depending on the used filter options and the matrix values.
 This means that a graph may be formed in such a way that all the nodes
 are reachable from each other (is connected) or not.
 In the latter case, the graph is is composed by a number of connected component
s.
 A path always exists between two arbitrary node belonging to a connected
 component, while no paths exist between two nodes belonging to two different
 connected components.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/figure1-e.png
	width 90text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Chains of relationships
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The algorithm we implemented, inspired to the one available in the FlexServ
 web server [Camps 
\shape italic
et al.
\shape default
, Bioinformatics, 2009], is designed to identify chains or sequences of
 residues maximally connected to a given one of interest.
\end_layout

\begin_layout Subsubsection
The algorithm
\end_layout

\begin_layout Standard
As introduced, the algorithm works on a graph representation of the input
 matrix 
\begin_inset Formula $M$
\end_inset

, considering the input matrix as a weight matrix.
 Residues 
\begin_inset Formula $I$
\end_inset

 and 
\begin_inset Formula $J$
\end_inset

, or corresponding to matrix indeces 
\begin_inset Formula $i$
\end_inset

 and 
\begin_inset Formula $j$
\end_inset

, are represented as nodes which are connected by an edge of weight 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $m_{ij}$
\end_inset

 
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
if 
\begin_inset Formula $m_{ij}\neq0$
\end_inset

.
 Matrix filtering (see previous sections) is performed before the construction
 of the graph, so that filtered out elements, which have value of 
\begin_inset Formula $0$
\end_inset

 in the filtered matrix, are never represented.
 Negative matrix elements are also always filtered out.
 
\end_layout

\begin_layout Standard
Once the graph has been built, a starting node (root) is selected and all
 the edges connected to the root are sorted by weight.
 The list of nodes is filtered by discarding both those that have already
 been explored by the algorithm, and, if desired, those that are also connected
 to the root node of the previous iteration (if available).
 The first 
\begin_inset Formula $w$
\end_inset

 edges of the list are selected, thus identifying the 
\begin_inset Formula $w$
\end_inset

 most importantly related nodes to the root.
 Each of these residues is then considered as a new root and the procedure
 is recursively repeated for 
\begin_inset Formula $d$
\end_inset

 iterations.
 The final result is a tree of connected nodes, with at most 
\begin_inset Formula $w$
\end_inset

 branches at every node and of maximum depth 
\begin_inset Formula $d$
\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Formula $d$
\end_inset

 and 
\begin_inset Formula $w$
\end_inset

, also known as depth and width, are two user-configurable parameters.
\end_layout

\begin_layout Subsubsection
Use of chained analysis
\end_layout

\begin_layout Standard
Chained relationships are calculated in the Chained tab.
 The user has to input a valid selection name into the Selection box, which
 must contain the residue(s) which will be considered as root by the search
 algorithm.
 The calculation is repeated independently considering each residue of the
 selection as root and using the graph obtained by the filtered input matrix.
 Width and depth parameters, as explained before, can be easily defined
 in this tab.
 The user can choose between two coloring modes: random or single color.
 In the random node a unique random color is chosen to represent a tree
 calculated by the algorithm starting from a single residue.
 This is particularly useful to quickly visualize chained relationships
 starting from several residues at once.
 In single color mode all the calculated trees are plotted on the structure
 using the same, user-defined color.
 Apart from color, the rest of the plotting settings is configured in the
 first tab.
\end_layout

\begin_layout Standard
Please keep in mind that using a pre-filtered matrix is essential to obtain
 meaningful results from the chained relationships analysis.
 This is particularly evident when dealing with motion relationships, as
 one residue will probably feature high correlation with closer residues,
 especially when they belong to the same secondary structure element.
\end_layout

\begin_layout Subsection
Protein graph analysis
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
placement t
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/figure1-c.png
	width 90text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Graph analysis
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The study of binary interactions, as the defined in the matricial representation
 used by xPyder, can be insightful in detecting relationships between single
 residues or single residues and protein regions, but does not tell much
 about how information is transmitted in the protein structure.
 This can be performed by identifying peculiar paths of connected residues
 over the structure, using the input matrix as the source of information.
 Since we're dealing with a network of relationships encoded by a matrix
 which closely resembles the graph theory's adjacency matrix, the use of
 graph theory seems natural to deal with such a problem.
 When the interaction network is seen as an undirected graph, performing
 a number of analyses is possible to evaluate overall topological properties
 of the network as well as the presence of peculiar paths between couples
 of residues.
 This analysis is performed in the Graph analysis tab.
\end_layout

\begin_layout Subsubsection
Calculating the graph
\end_layout

\begin_layout Standard
Analyzing the interactions graph first involves calculating such graph from
 the loaded matrix.
 This is performed by clicking on the Generate graph button in the Graph
 analysis tab.
 Clicking on the button performs the following operations: i) the loaded
 matrix is filtered according to the activated and working filters, plus
 filtering out the negative values; ii) the relationships weighted simple
 graph is generated from the filtered matrix.
 Residues are represented as nodes and the matrix-encoded relationships
 as edges, with edge weights equal to the corresponding matrix value; this
 means that two nodes are connected if the corresponding matrix value is
 non-zero.
 Diagonal elements of the matrix are always discarded.
 iii) the user interface is populated.
 Once the graph has been loaded additional analyses and plotting features
 can be performed, as detailed in the following sections.
 
\end_layout

\begin_layout Standard
Positive weights only are considered because positive-weighted graphs are
 simpler to treat.
 Anyway, one may need to use both positive and negative values of a metric
 (as happens in DCCMs) to obtain a more complete picture.
 In this case, an absolute values matrix should be considered for the graph
 analysis.
\end_layout

\begin_layout Standard
When the graph has been generated, a number of properties of the calculated
 graph are displayed, along with an histogram plot which display the distributio
n of vertex degrees of the graph, i.e.
 the number of nodes having a given degree value.
\end_layout

\begin_layout Standard

\series bold
\shape italic
\emph on
Important:
\series default
\shape default
\emph default
 Please notice that the graph is generated by clicking on the Generate graph
 button only.
 This means the the loaded graph is 
\emph on
not
\emph default
 automatically refreshed upon changing the filtering options; changing the
 filters without recalculating the graph will leave the Graph analysis tab
 and the rest of the program in an inconsistent state, as the two would
 refer to two differently filtered matrices.
 Loading another matrix, on the other hand, completely resets any previously
 calculated graph-related data, so that the graph has to be regenerated
 from scratch to perform the graph analysis.
\end_layout

\begin_layout Subsubsection
Graph analysis
\end_layout

\begin_layout Paragraph
Hubs 
\end_layout

\begin_layout Standard
The Hubs section of the graph analysis permits to identify the hub nodes
 of the graph, defined as those having a degree 
\begin_inset Formula $\geq k$
\end_inset

where 
\begin_inset Formula $k$
\end_inset

is a user-defined value.
 The degree of a node is the number of edges connected to it, and hub nodes
 are those featuring a relatively high number of relationships when compared
 to the other ones, and thus likely to have a significant functional or
 structural role, depending on the plotted matrix.
 A meaningful value of 
\begin_inset Formula $k$
\end_inset

 can be easily selected by evaluating the distribution of degree values
 on the histogram plot.
 Once that 
\begin_inset Formula $k$
\end_inset

 has been defined by inserting the chosen value in the input box of the
 hubs section, the user can choose to select on the 3D structure the hub
 residues by clicking on the Select hubs button.
\end_layout

\begin_layout Paragraph
Connected components
\end_layout

\begin_layout Standard
The user can choose to identify and plot the connected components of the
 graph.
 The components are listed by size in the list box under the Connected component
s section.
 The selection of the single component also permits to visualize few properties
 of the selected component.
 The user can choose to create a selection in the 3D structures of the residues
 corresponding to the nodes belonging to the selected connected component
 by clicking the Select component button.
 By clicking the Plot component button, otherwise, the relationships between
 the residues belonging to the selected component are plotted on the 3D
 structure in the form of cylinders interconnecting the alpha carbon of
 residues.
\end_layout

\begin_layout Paragraph
Pathways
\end_layout

\begin_layout Standard
The paths analysis uses a slight variation of depth-first search algorithm
 to identify all the paths in the graph connecting two given nodes.
 The user needs to specify the two extremities of the paths to be searched
 and the maximum path length 
\begin_inset Formula $m$
\end_inset

; upon clicking on the Calculate paths button, all the possible paths of
 length 
\begin_inset Formula $\leq m$
\end_inset

 will be displayed on the table on the right.
 The computational cost of this procedure depends on the topology of the
 graph and on the chosen threshold 
\begin_inset Formula $m$
\end_inset

.
 Please consider that in a very connected graph several thousands of paths
 may exist between two given nodes, meaning that this functionality should
 be used on well filtered graphs and on data types which emphasize local
 connectivity.
\end_layout

\begin_layout Standard
Once the table has been filled, to user can choose to select or plot on
 the 3D structure the selected path by selecting one or more on them in
 the table and clicking on the appropriate buttons.
 By clicking table labels it is also possible to order the table elements
 according to length, average or cumulative weight.
 
\end_layout

\begin_layout Subsection
Delta matrix
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/figure1-b.png
	width 90text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Delta matrix calculation
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
When comparing multiple matrices, the possibility to compute difference
 matrices, in a way similar to computing difference profiles (e.g.
 for RMSF profiles), focuses the analysis on the quantitative details of
 the comparison.
 The Delta correlation analysis of xPyder allows the user to compute and
 plot on the 3D structure the difference matrix (or delta matrix), to integrate
 structural insight into the detailed comparisons of the matrices, while
 providing the full set of xPyder's filtering features to customise the
 plot.
\end_layout

\begin_layout Standard
This analysis may prove useful when comparing matrices computed on the same
 structure (to compare two matrices resulting from two experiments on the
 same protein, e.g.
 the correlations from two MD simulations), or on different structures,
 for example two homologous proteins or a wild-type and a mutated variant.
 xPyder makes both analyses possible by allowing the user to specify an
 alignment to match the sequences of two homologues, in order to compute
 a meaningful difference matrix.
 
\end_layout

\begin_layout Subsubsection
Load another matrix
\end_layout

\begin_layout Standard
Allows the user to load a second matrix (
\begin_inset Formula $M_{i,j}^{(2)}$
\end_inset

) that will be used together with the first matrix (
\begin_inset Formula $M_{i,j}^{(1)}$
\end_inset

, see above) for delta calculations:
\end_layout

\begin_layout Description
\begin_inset Formula $D_{i,j}=M_{i,j}^{(1)}-M_{i,j}^{(2)}$
\end_inset


\end_layout

\begin_layout Standard
The delta matrix will be plotted on the structure using the same plot settings
 for the first matrix.
 If the data in the second matrix was computed on the saime structure as
 the first matrix, the sizes of the two matrices should be identical; if
 the sizes are not identical, an aligment must be provided (see on).
 
\end_layout

\begin_layout Description
Choose
\begin_inset space ~
\end_inset

matrix
\begin_inset space ~
\end_inset

file: The file containing the second matrix can be specified either by using
 the file selection dialog that appears by clicking on the button, or by
 typing its full path in the adjacent field;
\end_layout

\begin_layout Description
Load
\begin_inset space ~
\end_inset

second
\begin_inset space ~
\end_inset

matrix: This loads the second matrix from the specified file, and plots
 a histogram of the loaded values;
\end_layout

\begin_layout Subsubsection
Delta
\end_layout

\begin_layout Standard
In the case that the sizes of the first and second matrices don't match,
 an alignment must be provided so that xPyder can correctly match the values
 in the two matrices: 
\begin_inset Formula $_{i,j}=M_{i,j}^{(1)}-M_{A(i),A(j)}^{(2)}$
\end_inset

, where 
\begin_inset Formula $A(i)$
\end_inset

 is the position of 
\begin_inset Formula $M^{(2)}$
\end_inset

 matching position 
\begin_inset Formula $i$
\end_inset

 in 
\begin_inset Formula $M^{(1)}$
\end_inset

 according to the alignment.
 
\end_layout

\begin_layout Standard
The provided alignment file should contain at least 2 sequences, referring
 to the data in the first and second matrix in this order.
 This means that the length of the first sequence in the alignement, excluding
 gaps, should match the size of the first matrix; the same holds for the
 second sequence/second matrix.
 Any further sequences in the alignement will be ignored.
 
\end_layout

\begin_layout Standard
The format of the alignment file is a loose version of the ALN/ClustalW2
 format (http://www.ebi.ac.uk/2can/tutorials/formats.html#aln); we have dropped
 the requirement for the header (CLUSTAL W (version) ...) and the 60-residue
 limit for blocks.
 The consensus line below each block may be present and is ignored.
\end_layout

\begin_layout Standard
Please note that providing an alignement may be required even when the sizes
 of the matrices match, depending on the way the data in the two matrices
 was obtained (e.g.
 when comparing two proteins that align in such a way that only one of the
 two sequences has gaps).
 
\end_layout

\begin_layout Description
Choose
\begin_inset space ~
\end_inset

alignment
\begin_inset space ~
\end_inset

file: The file containing the correctly formatted alignement may be specified
 either by using the file selection dialog that appears by clicking on the
 button, or by typing its full path in the adjacent field;
\end_layout

\begin_layout Description
Delta
\begin_inset space ~
\end_inset

direction: Allows the user to define which should be the order of the resulting
 delta matrix; please note that the two results are one the opposite of
 the other;
\end_layout

\begin_layout Description
Use
\begin_inset space ~
\end_inset

alignement: The user can force xPyder to use/not use the provided alignement,
 if it is feasible;
\end_layout

\begin_layout Description
Compute
\begin_inset space ~
\end_inset

delta
\begin_inset space ~
\end_inset

matrix: This computes the delta matrix 
\begin_inset Formula $D_{i,j}$
\end_inset

, using an alignement if specified, and plots a histogram of the resulting
 delta values;
\end_layout

\begin_layout Description
Plot: Performs the entire Delta analysis pipeline with a single click; in
 particular, it performs the following actions:
\end_layout

\begin_layout Enumerate
Load the second matrix (see 
\begin_inset Quotes eld
\end_inset


\series bold
Load second matrix
\series default

\begin_inset Quotes erd
\end_inset

);
\end_layout

\begin_layout Enumerate
Compute the delta matrix (see 
\begin_inset Quotes eld
\end_inset


\series bold
Compute delta matrix
\series default

\begin_inset Quotes erd
\end_inset

);
\end_layout

\begin_layout Enumerate
Plot the delta matrix.
\end_layout

\begin_layout Section
Obtaining an xPyder matrix
\end_layout

\begin_layout Standard
As the xPyder main input format is an old-style plain ASCII matrix (see
 above for details), obtaining an xPyder-compatible file should be easy
 from common analysis tools such as those included in the gromacs or AMBER
 software suites.
 The following section briefly covers the topic of how to obtain the said
 matrices for the most used matricial metrics.
\end_layout

\begin_layout Subsection
MD Trajectories
\end_layout

\begin_layout Subsubsection
Dynamical cross-correlation matrices and Linear mutual information matrices
\end_layout

\begin_layout Standard
The Dynamical cross-correlation matrices (DCCM) [Hunenberger 
\emph on
et al.
\emph default
, J Mol Biol 1995, 252, (4), 492-503] can be easily calculated in gromacs
 using the modified version of the g_covar tool available on the gromacs
 website, that works with gromacs trajectories of version <4.
 This program has been updated to work with gromacs 4.x trajectories, and
 is available in the xPyder website.
\end_layout

\begin_layout Standard
In Amber you may refer to the ptraj analysis tool (look for the 'matrix
 corr' option).
 
\end_layout

\begin_layout Standard
You may also use the Wordom MD analysis suite (http://wordom.sourceforge.net/).
 A tool (wordomdccm2dat) is available on the xPyder website to convert the
 Wordom output to the ASCII matrix format used by xPyder.
 This conversion tool (and those described in the following paragraphs)
 is a Python 2.7 script which requires the numpy package.
 The usage of this and other scripts is pretty straightforward and adequately
 described in the script documentation itself (script -h or script –help).
\end_layout

\begin_layout Standard
Wordom is also able to calculate another index of motion correlation, namely
 the Linear mutual information (LMI) [Lange 
\emph on
et al.
\emph default
, 2006, 62, (4), 1053-1061], thus obtaining Linear mutual information matrices
 (LMIM).
 As these matrices are in the same format of DCCMs, they can readily be
 converted and plotted using xPyder, as explained before.
\end_layout

\begin_layout Subsubsection
Protein Structure Network
\end_layout

\begin_layout Standard
For both xtc and dcd trajectory files you may use Wordom; the steps needed
 to obtain a complete Protein Structure Network (PSN) [Vishveshwara 
\emph on
et al.,
\emph default
 Curr Protein Pept Sc 2009, 10, (2), 146-160] analysis are clearly detailed
 in the Wordom manual.
 Once a Wordom output has been obtained, the user needs to generate the
 corresponding .dat file to be used in xPyder.
 This is performed using the wordompsn2dat script available on the xPyder
 website, which permits to extract the interaction frequency for the PSN
 at a given 
\begin_inset Formula $I_{min}$
\end_inset

(i.e.
 the number of frames in which the two residues are connected by an edge
 in the PSN, over the total number of frames) or the average interaction
 strength matrix.
\end_layout

\begin_layout Subsection
Conformational ensembles (PDB)
\end_layout

\begin_layout Standard
The user may also need to analyse and plot the aforamentioned properties
 for a multi-pdb ensemble, such as one derived from an NMR ensemble available
 in the PDB databank or from a number of X-ray structures.
 In this case, the most straightforward way is to generate an MD trajectory
 from the PDB ensemble using Wordom, and then proceed as previously explained
 for the analysis.
 The process of generating an trajecory from a list of single PDB structures
 (i.e.
 each containing a single model) is covered in the Wordom manual, and will
 be shortly discussed here.
 
\end_layout

\begin_layout Standard
The user usually starts from a number of PDB files, named {conf1.pdb, conf2.pdb
 ...
 confi.pdb ...
 confn.pdb}.
 All the PDB files must differ only in terms of atomic coordinates: they
 must contain the same atoms in the same order, with the same name.
 It is advisable to remove all the non-protein atoms from the PDBs before
 using them.
 Once the PDB files have been correctly edited, use one of them to generate
 a trajectory:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

wordom -mono -imol conf1.pdb -otrj traj.dcd
\end_layout

\end_inset

The obtained PDB files can be appended to the trajectory file:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

wordom -amol conf2.pdb -otrj traj.dcd
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The obtained trajectory can then be analyzed using the standard Wordom tools
 and plotted using xPyder, as previously explained for trajectories.
\end_layout

\begin_layout Standard
PDB containing structures resolved from NMR experiments consist of several
 model entries each representing a single protein structure.
 These files have to be split so that one pdb per model is present, before
 adding them to a trajectory.
 This can be performed using PyMOL, or more easily, by using the nmrsplit
 Python script that is available on the xPyder website.
 The script requires numpy and Biopython (http://biopython.org/wiki/Biopython)
 installed.
\end_layout

\begin_layout Standard
Another useful software to analyze PDB ensembles is Theseus (http://www.theseus3d.
org/); it is designed to calculate optimal superimpositions of PDB structures
 using the maximum likelihood method and is able to output DCCM and covariance
 matrices.
 It is also capable of performing mode analysis on the calculated matrices,
 and the eigenvectors of the N-th principal component can be plotted using
 xPyder.
 The conversion of the matrices from the Theseus to the xPyder format is
 performed using the thesesudccm2dat and theseuspcs2dat available on the
 xPyder websites; the latter writes the principal component 
\emph on
i
\emph default
 as the diagonal values in an otherwise empty xPyder matrix.
\end_layout

\end_body
\end_document
